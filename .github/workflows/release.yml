name: Release
on:
  push:
    tags:
      - "*"
  workflow_dispatch:

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      APPNAME: ${{ steps.get_appname.outputs.APPNAME }}
      VERSION: ${{ steps.get_version.outputs.VERSION }}
      DATE: ${{ steps.get_date.outputs.DATE }}
    steps:
      - name: Get current date
        id: get_date
        run: echo "DATE=$(date +'%Y-%m-%d')" >> $GITHUB_OUTPUT
      - name: Get app name
        id: get_appname
        run: echo ::set-output name=APPNAME::${{ github.event.repository.name }}
      - name: Get version
        id: get_version
        run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}



  windows:
    strategy:
      matrix:
        python-version: ["3.12", "3.13"]

    needs: [setup]
    
    runs-on: windows-latest
    env:
      PACKAGENAME: ${{ needs.setup.outputs.APPNAME }}-${{ needs.setup.outputs.VERSION }}-windows
    steps:
      - name: Install winget
        uses: Cyberboss/install-winget@v1
        
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      - uses: ilammy/msvc-dev-cmd@v1
      
      - name: vulkansdk
        run: |
          winget install --id=KhronosGroup.VulkanSDK  -e --disable-interactivity --accept-source-agreements
          
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          architecture: x64
      - name: Check Python version
        run: |
          python --version
      - name: Install dependencies
        run: |
          pip install build
      - name: Build
        run: |
          $env:CMAKE_FLAGS="-DCMAKE_POLICY_VERSION_MINIMUM=3.5 -DPY_VERSION=${{ matrix.python-version }}"
          python -m build -w .
     
      - name: upload
        uses: actions/upload-artifact@v4
        with:
          name: windows-${{ matrix.python-version }}
          path: dist/


  linux:
    strategy:
      matrix:
        python-version: ["3.12","3.13"]
    needs: [setup]
    runs-on: ubuntu-22.04
    env:
      PACKAGENAME: ${{ needs.setup.outputs.APPNAME }}-${{ needs.setup.outputs.VERSION }}-ubuntu1804
      DEBIAN_FRONTEND: noninteractive
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive

      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          architecture: x64

      - name: Check Python version
        run: |
          python --version
     
      - name: vulkansdk
        run: |
          sudo apt install libvulkan-dev

      - name: Install dependencies
        run: |
          pip install build
      - name: Build
        run: |
          export CMAKE_FLAGS="-DCMAKE_POLICY_VERSION_MINIMUM=3.5 -DPY_VERSION=${{ matrix.python-version }}"
          python -m build -w .
          
      - name: replace whl name
        run: python3 replace_whl.py
          
      - name: upload
        uses: actions/upload-artifact@v4
        with:
          name: linux-${{ matrix.python-version }}
          path: dist/

  linux-arm:
    strategy:
      matrix:
        python-version: ["3.12","3.13"]
    needs: [setup]
    runs-on: ubuntu-22.04-arm
    env:
      PACKAGENAME: ${{ needs.setup.outputs.APPNAME }}-${{ needs.setup.outputs.VERSION }}-ubuntu1804
      DEBIAN_FRONTEND: noninteractive
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive

      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          architecture: aarch64

      - name: Check Python version
        run: |
          python --version
     
      - name: vulkansdk
        run: |
          sudo apt install libvulkan-dev

      - name: Install dependencies
        run: |
          pip install build
      - name: Build
        run: |
          export CMAKE_FLAGS="-DCMAKE_POLICY_VERSION_MINIMUM=3.5 -DPY_VERSION=${{ matrix.python-version }}"
          python -m build -w .
          
      - name: replace whl name
        run: python3 replace_whl.py
          
      - name: upload
        uses: actions/upload-artifact@v4
        with:
          name: linuxarm-${{ matrix.python-version }}
          path: dist/
          
  macos:
    needs: [setup]
    strategy:
      matrix:
        python-version: ["3.12","3.13"]
    env:
      PACKAGENAME: ${{ needs.setup.outputs.APPNAME }}-${{ needs.setup.outputs.VERSION }}-macos-x86_64
    runs-on: macos-13
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      - name: vulkansdk
        run: |
          wget https://github.com/TNTwise/rife-ncnn-vulkan-python/releases/download/VulkanSDK/vulkansdk-macos-1.2.162.0.dmg -O vulkansdk-macos-1.2.162.0.dmg
          hdiutil attach vulkansdk-macos-1.2.162.0.dmg
          cp -r /Volumes/vulkansdk-macos-1.2.162.0 .
          rm -rf vulkansdk-macos-1.2.162.0/Applications
          find vulkansdk-macos-1.2.162.0 -type f | grep -v -E 'vulkan|glslang|MoltenVK' | xargs rm
          hdiutil detach /Volumes/vulkansdk-macos-1.2.162.0
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          architecture: x64
      - name: Check Python version
        run: |
          python --version
      - name: Install dependencies
        run: |
          pip install build
          brew install swig
      - name: Build
        run: |
          export VULKAN_SDK=`pwd`/vulkansdk-macos-1.2.162.0/macOS
          export CMAKE_FLAGS="-DCMAKE_POLICY_VERSION_MINIMUM=3.5 -DUSE_STATIC_MOLTENVK=ON -DCMAKE_OSX_ARCHITECTURES=x86_64 \
          -DVulkan_INCLUDE_DIR=`pwd`/vulkansdk-macos-1.2.162.0/MoltenVK/include \
          -DVulkan_LIBRARY=`pwd`/vulkansdk-macos-1.2.162.0/MoltenVK/MoltenVK.xcframework/macos-arm64_x86_64/libMoltenVK.a \
          -DPY_VERSION=${{ matrix.python-version }}"
          python -m build -w .
      - name: Get .whl file name
        id: get-whl
        run: |
            WHL_FILE=$(ls dist/*.whl)
            echo "WHL_FILE=$WHL_FILE" >> $GITHUB_ENV
      - name: replace whl name
        run: python3 replace_whl.py
      - name: upload
        uses: actions/upload-artifact@v4
        with:
          path: dist
          name: macos-x86_64-${{ matrix.python-version }}


  macos-arm:
    needs: [setup]
    strategy:
      matrix:
        python-version: ["3.12","3.13"]
    env:
      PACKAGENAME: ${{ needs.setup.outputs.APPNAME }}-${{ needs.setup.outputs.VERSION }}-macos-arm64
    runs-on: macos-14
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      - name: vulkansdk
        run: |
          wget https://github.com/TNTwise/rife-ncnn-vulkan-python/releases/download/VulkanSDK/vulkansdk-macos-1.2.162.0.dmg -O vulkansdk-macos-1.2.162.0.dmg
          hdiutil attach vulkansdk-macos-1.2.162.0.dmg
          cp -r /Volumes/vulkansdk-macos-1.2.162.0 .
          rm -rf vulkansdk-macos-1.2.162.0/Applications
          find vulkansdk-macos-1.2.162.0 -type f | grep -v -E 'vulkan|glslang|MoltenVK' | xargs rm
          hdiutil detach /Volumes/vulkansdk-macos-1.2.162.0
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          architecture: x64
      - name: Check Python version
        run: |
          python --version
      - name: Install dependencies
        run: |
          pip install build
          brew install swig
      - name: Build
        run: |
          export VULKAN_SDK=`pwd`/vulkansdk-macos-1.2.162.0/macOS
          export CMAKE_FLAGS="-DCMAKE_POLICY_VERSION_MINIMUM=3.5 -DUSE_STATIC_MOLTENVK=ON -DCMAKE_OSX_ARCHITECTURES=arm64 \
          -DVulkan_INCLUDE_DIR=`pwd`/vulkansdk-macos-1.2.162.0/MoltenVK/include \
          -DVulkan_LIBRARY=`pwd`/vulkansdk-macos-1.2.162.0/MoltenVK/MoltenVK.xcframework/macos-arm64_x86_64/libMoltenVK.a \
          -DPY_VERSION=${{ matrix.python-version }}"
          python -m build -w .
      - name: Get .whl file name
        id: get-whl
        run: |
            WHL_FILE=$(ls dist/*.whl)
            echo "WHL_FILE=$WHL_FILE" >> $GITHUB_ENV
      - name: replace whl name
        run: python3 replace_whl.py
      - name: upload
        uses: actions/upload-artifact@v4
        with:
          path: dist
          name: macos-arm64-${{ matrix.python-version }}


  Release:
    needs: [setup, windows, macos, macos-arm, linux]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v4
        with:
          path: asset
  
      - name: dist
        run: |
          mkdir -p dist
          find asset -type f -name "*.whl" -exec cp {} dist/ \;
          cd dist && ls
  
      
      - name: Create Release and Upload Release Asset
        uses: softprops/action-gh-release@v1
        with:
          name: Release ${{ needs.setup.outputs.DATE }}
          tag_name: ${{ needs.setup.outputs.DATE }}
          body: Auto Release.
          draft: false
          prerelease: false
          files: dist/*
